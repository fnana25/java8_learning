1、逃逸分析：
判断依据：对象是否存入堆中；对象是否被传入未知代码中。
基于逃逸分析的优化：锁消除、对象栈上分配（标量替换）。
标量替换及原本连续分配的对象拆散为一个个单独的字段，分配在栈中或寄存器中，去掉对象头。

2、内存溢出与内存泄漏的区别：
内存溢出：系统不能分配所需的内存空间了。
内存泄漏：内存资源用完后没有回收。
内存溢出的原因：
   内存中加载的数据量太大；
   集合类中有对象的引用，使用完后未清空，使jvm不能回收；
   代码中产生死循环，或循环产生过多对象；
   启动参数的内存值设置得太小
 解决办法：
   修改jvm启动参数，增加内存（-xms,-xmx)
   检查错误日志
   检查代码
   使用工具查看内存使用情况

3、编译时/运行时
   以下发生在编译时：
   常量折叠，final 的常量在编译时替换为具体数值；
   泛型，编译器负责检查程序中类型的正确性，这个技术被称为“类型擦除“；
   方法重载；
   编译时注解；
   异常检查；
   aop编译时织入；lala
   继承；

4、解释执行与编译执行
   解释执行：将编译好的字节码一行一行地翻译为机器码执行。
   编译执行：以方法为单位，将字节码一次性翻译为机器码后执行。

5、编译过程
  词法分析：将源代码的字符流转变为标记（Token）集合，关键字、变量名、字面量、运算符等都可以成为标记
  语法分析：根据Token序列来构造抽象语法树的过程。
           抽象语法树是一种用来描述程序代码语法结构的树形表示方式，语法树的每一个节点都代表着程序代码中的一个语法结构，如类型、修饰符、运算符等。
  语义分析：对结构上正确的源程序进行上下文有关性的审查。
  语义分析过程分为标注检查和数据及控制流分析两个步骤：
     标注检查的内容包括诸如：变量使用前是否已被声明、变量和赋值之间的数据类型是否匹配等。
     数据及控制流分析是对程序上下文逻辑更进一步的验证，
     检查出诸如:程序局部变量在使用前是否有赋值、方法的每条路径是否都有返回值、是否所有的受查异常都被正确处理了等问题。
  字节码生成：把前面各个步骤所生成的信息转化成字节码写到磁盘中。



